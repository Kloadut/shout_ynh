#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers
source _variables

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
is_public=$(ynh_app_setting_get $app is_public)
final_path=$(ynh_app_setting_get $app final_path)
port=$(ynh_app_setting_get $app port)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

# If config_path doesn't exist, create it
if [ -z $config_path ]; then
	config_path=/home/yunohost.app/$app
	ynh_app_setting_set $app config_path $config_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_use_nodejs
ynh_replace_string "__NODEJS__" "$nodejs_version" "../conf/systemd.service"
ynh_replace_string "__ENV_PATH__" "$PATH" "../conf/systemd.service"
ynh_replace_string "__NODE__" "$nodejs_path" "../conf/systemd.service"
ynh_add_systemd_config
cat /etc/systemd/system/$app.service
echo $nodejs_version
echo $PATH
echo $nodejs_path

#=================================================
# MODIFY A CONFIG FILE
#=================================================

cp -a ../conf/config.js $config_path

#=================================================
# UPGRADE THE LOUNGE
#=================================================

# Upgrade Nodejs
ynh_install_nodejs

ynh_setup_source $final_path
cd $final_path
npm install --unsafe-perm

# Install webpack
npm install webpack
npm install webpack-cli
npm install copy-webpack-plugin

# Build The Lounge
NODE_ENV=production npm run build

#=================================================
# SPECIFIC UPGRADE
#=================================================
# ...
#=================================================

# Verify the checksum and backup the file if it's different
ynh_backup_if_checksum_is_different "$config_path/config.js"
# Recalculate and store the config file checksum into the app settings
ynh_store_file_checksum "$config_path/config.js"

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set right permissions for curl installation
chown -R $app: $final_path
chown -R $app: $config_path

#=================================================
# SETUP SSOWAT
#=================================================

if [ $is_public -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete $app skipped_uris
fi
# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl restart thelounge
systemctl reload nginx
